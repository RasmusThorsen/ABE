service:
  name: scenario-service

custom:
  tableName: 'scenarios-table'
  corsSetting: 
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - Identity-Id  

plugins:
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-central-1
  iamRoleStatements:
    - Effect: Allow
      Action: "*"
        # - dynamodb:Query
        # - dynamodb:Scan
        # - dynamodb:GetItem
        # - dynamodb:PutItem
        # - dynamodb:UpdateItem
        # - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ScenarioDynamoDBTable", "Arn" ] }
        - "*"
  environment:
    SCENARIO_TABLE: ${self:custom.tableName}

functions:
  getScenario:
    handler: get.get
    events:
      - http:
          method: get
          path: scenario/{id}
          reqValidatorName: HeaderValidator
          cors: ${self:custom.corsSetting}
          authorizer:
            name: cognito-authorizer
            arn: arn:aws:cognito-idp:eu-central-1:059399871100:userpool/eu-central-1_8MjsaiF5t
            scopes:
              - aws.cognito.signin.user.admin

  getAllScenario:
    handler: getAll.getAll
    events:
      - http:
          method: get
          path: scenario
          reqValidatorName: HeaderValidator
          cors: ${self:custom.corsSetting}
          authorizer:
            name: cognito-authorizer
            arn: arn:aws:cognito-idp:eu-central-1:059399871100:userpool/eu-central-1_8MjsaiF5t
            scopes:
              - aws.cognito.signin.user.admin

  createScenario:
    handler: create.create
    events:
      - http:
          method: post
          path: scenario
          reqValidatorName: HeaderValidator
          cors: ${self:custom.corsSetting}
          authorizer:
            name: cognito-authorizer
            arn: arn:aws:cognito-idp:eu-central-1:059399871100:userpool/eu-central-1_8MjsaiF5t
            scopes:
              - aws.cognito.signin.user.admin

  deleteScenario:
      handler: delete.deleteScenario
      events:
        - http:
            method: delete
            path: scenario/{id}
            reqValidatorName: HeaderValidator
            cors: ${self:custom.corsSetting}
            authorizer:
              name: cognito-authorizer
              arn: arn:aws:cognito-idp:eu-central-1:059399871100:userpool/eu-central-1_8MjsaiF5t
              scopes:
                - aws.cognito.signin.user.admin

  action:
    handler: action.action
    reservedConcurrency: 5

resources:
  Resources:
    ScenarioDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}